<?php

namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiResource;
use App\Repository\ApiTokenRepository;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Uid\Uuid;
use ApiPlatform\Core\Annotation\ApiProperty;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\DateFilter;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\OrderFilter;
use ApiPlatform\Core\Annotation\ApiFilter;
use ApiPlatform\Core\Serializer\Filter\PropertyFilter;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\Validator\Constraints as Assert;
use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\SearchFilter;


/**
 * ApiToken
 * @ApiFilter(PropertyFilter::class)
 * @ApiFilter (OrderFilter::class, properties={
 *     "code",
 *     "name",
 *     "user.username",
 *     "userGroup.name",
 *     "token",
 *     "expiredAt",
 *     "createdAt",
 *     "updatedAt"
 *     })
 * @ORM\Entity(repositoryClass=ApiTokenRepository::class)
 * @ApiResource(
 *     normalizationContext=ApiToken::API_READ,
 *     denormalizationContext=ApiToken::API_UPDATE,
 *     collectionOperations={
 *         "get"={"normalization_context"=ApiToken::API_READ, "security"="is_granted('ROLE_API_TOKEN_GET_COLLECTION') and is_granted('ROLE_ADMIN', object)"},
 *         "post"={"denormalization_context"=ApiToken::API_CREATE,
 *                 "security_post_denormalize" = "is_granted('ROLE_API_TOKEN_POST_COLLECTION', object) and is_granted('ROLE_ADMIN', object)"}
 *     },
 *     itemOperations={
 *         "get"={"normalization_context"=ApiToken::API_READ_DETAIL, "security"="is_granted('ROLE_API_TOKEN_GET_ITEM', object) and is_granted('ROLE_ADMIN', object)"},
 *         "delete"={"security"="is_granted('ROLE_API_TOKEN_DELETE_ITEM', object) and is_granted('ROLE_ADMIN', object)"},
 *         "patch"={"security"="is_granted('ROLE_API_TOKEN_PATCH_ITEM', object) and is_granted('ROLE_ADMIN', object)"},
 *         "patch_expired_at" = {
 *             "input_formats"={"json"={"application/merge-patch+json"}},
 *             "method"="PATCH",
 *             "path"="/api_tokens/{code}/expired_at",
 *             "format"= "jsonld",
 *             "security"="is_granted('ROLE_API_TOKEN_PATCH_EXPIRED_AT')  and is_granted('ROLE_ADMIN', object)",
 *             "denormalization_context"= ApiToken::API_PATCH_EXPIRED_AT,
 *             "normalization_context"= ApiToken::API_PATCH_EXPIRED_AT,
 *             "openapi_context" = {
 *                 "summary" = "Updates the expiredAt",
 *                 "description" = "Updates only the  **expiredAt** ."
 *             }
 *         },
 *     }
 * )
 *
 * This entity manages the second system of authentication with tokens generated by the admin:
 * we add in the header the parameter "X-AUTH-TOKEN" which contains the generated token which is associated with a user.
 * If the token has not expired, the user is authenticated and he can consume the API with the permissions granted to him.
 * @UniqueEntity("code")
 */
class ApiToken
{
    public const GROUP_CREATE = 'api_token:create';
    public const GROUP_READ_DEFAULT = 'api_token:read_default';
    public const GROUP_READ_COLLECTION = 'api_token:read_list';
    public const GROUP_READ_ITEM = 'api_token:read_detail';
    public const GROUP_UPDATE = 'api_token:write';
    public const GROUP_UPDATE_EXPIRED_AT = 'api_token:write_token';

    public const API_CREATE = [
        'swagger_definition_name' => 'Create',
        "skip_null_values" => false,
        'groups' => [
            ApiToken::GROUP_CREATE,
            ApiToken::GROUP_UPDATE,
        ],
    ];
    public const API_READ = [
        'swagger_definition_name' => 'Read',
        "skip_null_values" => false,
        'groups' => [
            ApiToken::GROUP_READ_DEFAULT,
            ApiToken::GROUP_READ_COLLECTION,
            User::GROUP_READ_DEFAULT,
            UserGroup::GROUP_READ_DEFAULT,
            Customer::GROUP_READ_DEFAULT,
        ],
    ];
    public const API_READ_DETAIL = [
        'swagger_definition_name' => 'Detail',
        "skip_null_values" => false,
        'groups' => [
            ApiToken::GROUP_READ_DEFAULT,
            ApiToken::GROUP_READ_COLLECTION,
            ApiToken::GROUP_READ_ITEM,
            User::GROUP_READ_DEFAULT,
            UserGroup::GROUP_READ_DEFAULT,
            Customer::GROUP_READ_DEFAULT,
        ],
    ];
    public const API_UPDATE = [
        'swagger_definition_name' => 'Update',
        "skip_null_values" => false,
        'groups' => [
            ApiToken::GROUP_UPDATE,
        ],
    ];

    public const API_PATCH_EXPIRED_AT = [
        'swagger_definition_name' => 'Update expiredAt',
        "skip_null_values" => false,
        'groups' => [
            ApiToken::GROUP_UPDATE_EXPIRED_AT,
        ],
    ];
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     * @ApiProperty(identifier=false)
     */
    private $id;

    /**
     * @var Uuid External identifier used by API
     * @ORM\Column(type="uuid", unique=true)
     * @ApiProperty(identifier=true)
     * @Groups({ApiToken::GROUP_READ_DEFAULT, ApiToken::GROUP_CREATE})
     */
    private $code;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     * @ApiFilter(SearchFilter::class, strategy="partial")
     * @Groups({ApiToken::GROUP_READ_DEFAULT})
     * @Assert\Length(
     *     min=2,
     *     max=255,
     *     maxMessage="Maximum number of characters is 255",
     *     minMessage="Minimum number of characters is 2"
     * )
     * @Groups({ApiToken::GROUP_READ_DEFAULT, ApiToken::GROUP_CREATE})
     */
    private $name;

    /**
     * @ORM\ManyToOne(targetEntity=User::class, inversedBy="apiToken")
     * @ORM\JoinColumn(nullable=false)
     * @Groups({ApiToken::GROUP_READ_DEFAULT, ApiToken::GROUP_CREATE})
     */
    private $user;

    /**
     * @ORM\ManyToOne(targetEntity=UserGroup::class, inversedBy="apiToken")
     * @ORM\JoinColumn(nullable=false)
     * @Groups({ApiToken::GROUP_READ_DEFAULT, ApiToken::GROUP_CREATE})
     */
    private $userGroup;

    /**
     * @ORM\Column(type="string", length=255, unique=true)
     * @Groups({ApiToken::GROUP_READ_DEFAULT})
     */
    private $token;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Groups({ApiToken::GROUP_READ_DEFAULT, ApiToken::GROUP_UPDATE, ApiToken::GROUP_UPDATE_EXPIRED_AT})
     * @example(Y-m-d H:i:s)
     */
    private $expiredAt;

    /**
     * @ORM\Column(type="datetime")
     * @ApiFilter(DateFilter::class)
     * @Gedmo\Timestampable(on="create")
     * @Groups({ApiToken::GROUP_READ_DEFAULT})
     */
    private $createdAt;

    /**
     * @ORM\Column(type="datetime")
     * @ApiFilter(DateFilter::class)
     * @Gedmo\Timestampable(on="update")
     * @Groups({ApiToken::GROUP_READ_DEFAULT})
     */
    private $updatedAt;

    public function __construct()
    {
        $this->token = md5(uniqid(rand(), true));
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getCode(): ?Uuid
    {
        return $this->code;
    }

    public function setCode(Uuid $code): self
    {
        $this->code = $code;

        return $this;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }


    public function getUser(): User
    {
        return $this->user;
    }

    public function setUser(User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getUserGroup(): UserGroup
    {
        return $this->userGroup;
    }


    public function setUserGroup(UserGroup $userGroup): self
    {
        $this->userGroup = $userGroup;
        return $this;
    }

    public function getToken(): ?string
    {
        return $this->token;
    }

    public function setToken(string $token): self
    {
        $this->token = $token;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeInterface $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeInterface
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(\DateTimeInterface $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getExpiredAt(): ?\DateTimeInterface
    {
        return $this->expiredAt;
    }

    public function setExpiredAt(?\DateTimeInterface $expiredAt): self
    {
        $this->expiredAt = $expiredAt ? $expiredAt : null;

        return $this;
    }

}
